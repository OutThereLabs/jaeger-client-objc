/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TProtocolFactory.h"
#import "TApplicationError.h"
#import "TProtocolError.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TBaseClient.h"


#import "Jaeger.h"

@implementation Tag

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithKey: (NSString *) key vType: (TagType) vType vStr: (NSString *) vStr vDouble: (double) vDouble vBool: (BOOL) vBool vLong: (SInt64) vLong vBinary: (NSData *) vBinary
{
  self = [super init];
  if (self)  {
    _key = key;
    _keyIsSet = YES;
    _vType = vType;
    _vTypeIsSet = YES;
    _vStr = vStr;
    _vStrIsSet = YES;
    _vDouble = vDouble;
    _vDoubleIsSet = YES;
    _vBool = vBool;
    _vBoolIsSet = YES;
    _vLong = vLong;
    _vLongIsSet = YES;
    _vBinary = vBinary;
    _vBinaryIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"key"])
    {
      _key = [decoder decodeObjectForKey: @"key"];
      _keyIsSet = YES;
    }
    if ([decoder containsValueForKey: @"vType"])
    {
      _vType = [decoder decodeIntForKey: @"vType"];
      _vTypeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"vStr"])
    {
      _vStr = [decoder decodeObjectForKey: @"vStr"];
      _vStrIsSet = YES;
    }
    if ([decoder containsValueForKey: @"vDouble"])
    {
      _vDouble = [decoder decodeDoubleForKey: @"vDouble"];
      _vDoubleIsSet = YES;
    }
    if ([decoder containsValueForKey: @"vBool"])
    {
      _vBool = [decoder decodeBoolForKey: @"vBool"];
      _vBoolIsSet = YES;
    }
    if ([decoder containsValueForKey: @"vLong"])
    {
      _vLong = [decoder decodeInt64ForKey: @"vLong"];
      _vLongIsSet = YES;
    }
    if ([decoder containsValueForKey: @"vBinary"])
    {
      _vBinary = [decoder decodeObjectForKey: @"vBinary"];
      _vBinaryIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_keyIsSet)
  {
    [encoder encodeObject: _key forKey: @"key"];
  }
  if (_vTypeIsSet)
  {
    [encoder encodeInt: _vType forKey: @"vType"];
  }
  if (_vStrIsSet)
  {
    [encoder encodeObject: _vStr forKey: @"vStr"];
  }
  if (_vDoubleIsSet)
  {
    [encoder encodeDouble: _vDouble forKey: @"vDouble"];
  }
  if (_vBoolIsSet)
  {
    [encoder encodeBool: _vBool forKey: @"vBool"];
  }
  if (_vLongIsSet)
  {
    [encoder encodeInt64: _vLong forKey: @"vLong"];
  }
  if (_vBinaryIsSet)
  {
    [encoder encodeObject: _vBinary forKey: @"vBinary"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _keyIsSet ? 2654435761 : 0;
  if (_keyIsSet)
  {
    hash = (hash * 31) ^ [_key hash];
  }
  hash = (hash * 31) ^ _vTypeIsSet ? 2654435761 : 0;
  if (_vTypeIsSet)
  {
    hash = (hash * 31) ^ [@(_vType) hash];
  }
  hash = (hash * 31) ^ _vStrIsSet ? 2654435761 : 0;
  if (_vStrIsSet)
  {
    hash = (hash * 31) ^ [_vStr hash];
  }
  hash = (hash * 31) ^ _vDoubleIsSet ? 2654435761 : 0;
  if (_vDoubleIsSet)
  {
    hash = (hash * 31) ^ [@(_vDouble) hash];
  }
  hash = (hash * 31) ^ _vBoolIsSet ? 2654435761 : 0;
  if (_vBoolIsSet)
  {
    hash = (hash * 31) ^ [@(_vBool) hash];
  }
  hash = (hash * 31) ^ _vLongIsSet ? 2654435761 : 0;
  if (_vLongIsSet)
  {
    hash = (hash * 31) ^ [@(_vLong) hash];
  }
  hash = (hash * 31) ^ _vBinaryIsSet ? 2654435761 : 0;
  if (_vBinaryIsSet)
  {
    hash = (hash * 31) ^ [_vBinary hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Tag class]]) {
    return NO;
  }
  Tag *other = (Tag *)anObject;
  if ((_keyIsSet != other->_keyIsSet) ||
      (_keyIsSet && ((_key || other->_key) && ![_key isEqual:other->_key]))) {
    return NO;
  }
  if ((_vTypeIsSet != other->_vTypeIsSet) ||
      (_vTypeIsSet && (_vType != other->_vType))) {
    return NO;
  }
  if ((_vStrIsSet != other->_vStrIsSet) ||
      (_vStrIsSet && ((_vStr || other->_vStr) && ![_vStr isEqual:other->_vStr]))) {
    return NO;
  }
  if ((_vDoubleIsSet != other->_vDoubleIsSet) ||
      (_vDoubleIsSet && (_vDouble != other->_vDouble))) {
    return NO;
  }
  if ((_vBoolIsSet != other->_vBoolIsSet) ||
      (_vBoolIsSet && (_vBool != other->_vBool))) {
    return NO;
  }
  if ((_vLongIsSet != other->_vLongIsSet) ||
      (_vLongIsSet && (_vLong != other->_vLong))) {
    return NO;
  }
  if ((_vBinaryIsSet != other->_vBinaryIsSet) ||
      (_vBinaryIsSet && ((_vBinary || other->_vBinary) && ![_vBinary isEqual:other->_vBinary]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Tag * val = [Tag new];
  if (_keyIsSet)
  {
    val.key = [self.key copy];
  }
  if (_vTypeIsSet)
  {
    val.vType = self.vType;
  }
  if (_vStrIsSet)
  {
    val.vStr = [self.vStr copy];
  }
  if (_vDoubleIsSet)
  {
    val.vDouble = self.vDouble;
  }
  if (_vBoolIsSet)
  {
    val.vBool = self.vBool;
  }
  if (_vLongIsSet)
  {
    val.vLong = self.vLong;
  }
  if (_vBinaryIsSet)
  {
    val.vBinary = [self.vBinary copy];
  }
  return val;
}

- (void) setKey: (NSString *) key {
  _key = key;
  _keyIsSet = YES;
}

- (void) unsetKey {
  _key = nil;
  _keyIsSet = NO;
}

- (void) setVType: (TagType) vType {
  _vType = vType;
  _vTypeIsSet = YES;
}

- (void) unsetVType {
  _vTypeIsSet = NO;
}

- (void) setVStr: (NSString *) vStr {
  _vStr = vStr;
  _vStrIsSet = YES;
}

- (void) unsetVStr {
  _vStr = nil;
  _vStrIsSet = NO;
}

- (void) setVDouble: (double) vDouble {
  _vDouble = vDouble;
  _vDoubleIsSet = YES;
}

- (void) unsetVDouble {
  _vDoubleIsSet = NO;
}

- (void) setVBool: (BOOL) vBool {
  _vBool = vBool;
  _vBoolIsSet = YES;
}

- (void) unsetVBool {
  _vBoolIsSet = NO;
}

- (void) setVLong: (SInt64) vLong {
  _vLong = vLong;
  _vLongIsSet = YES;
}

- (void) unsetVLong {
  _vLongIsSet = NO;
}

- (void) setVBinary: (NSData *) vBinary {
  _vBinary = vBinary;
  _vBinaryIsSet = YES;
}

- (void) unsetVBinary {
  _vBinary = nil;
  _vBinaryIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.key = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI32) {
          TagType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.vType = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.vStr = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeDOUBLE) {
          double fieldValue;
          if (![inProtocol readDouble:&fieldValue error: __thriftError]) return NO;
          self.vDouble = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.vBool = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.vLong = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeSTRING) {
          NSData * fieldValue;
          if (![inProtocol readBinary:&fieldValue error: __thriftError]) return NO;
          self.vBinary = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Tag" error: __thriftError]) return NO;
  if (_keyIsSet) {
    if (_key != nil) {
      if (![outProtocol writeFieldBeginWithName: @"key" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _key error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_vTypeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"vType" type: TTypeI32 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _vType error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_vStrIsSet) {
    if (_vStr != nil) {
      if (![outProtocol writeFieldBeginWithName: @"vStr" type: TTypeSTRING fieldID: 3 error: __thriftError]) return NO;
      if (![outProtocol writeString: _vStr error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_vDoubleIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"vDouble" type: TTypeDOUBLE fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeDouble: _vDouble error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_vBoolIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"vBool" type: TTypeBOOL fieldID: 5 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _vBool error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_vLongIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"vLong" type: TTypeI64 fieldID: 6 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _vLong error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_vBinaryIsSet) {
    if (_vBinary != nil) {
      if (![outProtocol writeFieldBeginWithName: @"vBinary" type: TTypeSTRING fieldID: 7 error: __thriftError]) return NO;
      if (![outProtocol writeBinary: _vBinary error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_keyIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"key"}];
    }
  }
  if (!_vTypeIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"vType"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Tag("];
  [ms appendString: @"key:"];
  [ms appendFormat: @"\"%@\"", _key];
  [ms appendString: @",vType:"];
  [ms appendFormat: @"%i", (int)_vType];
  [ms appendString: @",vStr:"];
  [ms appendFormat: @"\"%@\"", _vStr];
  [ms appendString: @",vDouble:"];
  [ms appendFormat: @"%f", _vDouble];
  [ms appendString: @",vBool:"];
  [ms appendFormat: @"%i", _vBool];
  [ms appendString: @",vLong:"];
  [ms appendFormat: @"%qi", _vLong];
  [ms appendString: @",vBinary:"];
  [ms appendFormat: @"\"%@\"", _vBinary];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Log

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithTimestamp: (SInt64) timestamp fields: (NSArray<Tag *> *) fields
{
  self = [super init];
  if (self)  {
    _timestamp = timestamp;
    _timestampIsSet = YES;
    _fields = [fields mutableCopy];
    _fieldsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"timestamp"])
    {
      _timestamp = [decoder decodeInt64ForKey: @"timestamp"];
      _timestampIsSet = YES;
    }
    if ([decoder containsValueForKey: @"fields"])
    {
      _fields = [decoder decodeObjectForKey: @"fields"];
      _fieldsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_timestampIsSet)
  {
    [encoder encodeInt64: _timestamp forKey: @"timestamp"];
  }
  if (_fieldsIsSet)
  {
    [encoder encodeObject: _fields forKey: @"fields"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _timestampIsSet ? 2654435761 : 0;
  if (_timestampIsSet)
  {
    hash = (hash * 31) ^ [@(_timestamp) hash];
  }
  hash = (hash * 31) ^ _fieldsIsSet ? 2654435761 : 0;
  if (_fieldsIsSet)
  {
    hash = (hash * 31) ^ [_fields hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Log class]]) {
    return NO;
  }
  Log *other = (Log *)anObject;
  if ((_timestampIsSet != other->_timestampIsSet) ||
      (_timestampIsSet && (_timestamp != other->_timestamp))) {
    return NO;
  }
  if ((_fieldsIsSet != other->_fieldsIsSet) ||
      (_fieldsIsSet && ((_fields || other->_fields) && ![_fields isEqual:other->_fields]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Log * val = [Log new];
  if (_timestampIsSet)
  {
    val.timestamp = self.timestamp;
  }
  if (_fieldsIsSet)
  {
    val.fields = [self.fields copy];
  }
  return val;
}

- (void) setTimestamp: (SInt64) timestamp {
  _timestamp = timestamp;
  _timestampIsSet = YES;
}

- (void) unsetTimestamp {
  _timestampIsSet = NO;
}

- (void) setFields: (NSMutableArray<Tag *> *) fields {
  _fields = fields;
  _fieldsIsSet = YES;
}

- (void) unsetFields {
  _fields = nil;
  _fieldsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.timestamp = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeLIST) {
          SInt32 _size0;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size0 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            Tag *_elem2 = [[Tag alloc] init];
            if (![_elem2 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem2];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.fields = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Log" error: __thriftError]) return NO;
  if (_timestampIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"timestamp" type: TTypeI64 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _timestamp error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_fieldsIsSet) {
    if (_fields != nil) {
      if (![outProtocol writeFieldBeginWithName: @"fields" type: TTypeLIST fieldID: 2 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_fields count] error: __thriftError]) return NO;
        int idx4;
        for (idx4 = 0; idx4 < [_fields count]; idx4++)
        {
          if (![[_fields objectAtIndex: idx4] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_timestampIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"timestamp"}];
    }
  }
  if (!_fieldsIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"fields"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Log("];
  [ms appendString: @"timestamp:"];
  [ms appendFormat: @"%qi", _timestamp];
  [ms appendString: @",fields:"];
  [ms appendFormat: @"%@", _fields];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SpanRef

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithRefType: (SpanRefType) refType traceIdLow: (SInt64) traceIdLow traceIdHigh: (SInt64) traceIdHigh spanId: (SInt64) spanId
{
  self = [super init];
  if (self)  {
    _refType = refType;
    _refTypeIsSet = YES;
    _traceIdLow = traceIdLow;
    _traceIdLowIsSet = YES;
    _traceIdHigh = traceIdHigh;
    _traceIdHighIsSet = YES;
    _spanId = spanId;
    _spanIdIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"refType"])
    {
      _refType = [decoder decodeIntForKey: @"refType"];
      _refTypeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"traceIdLow"])
    {
      _traceIdLow = [decoder decodeInt64ForKey: @"traceIdLow"];
      _traceIdLowIsSet = YES;
    }
    if ([decoder containsValueForKey: @"traceIdHigh"])
    {
      _traceIdHigh = [decoder decodeInt64ForKey: @"traceIdHigh"];
      _traceIdHighIsSet = YES;
    }
    if ([decoder containsValueForKey: @"spanId"])
    {
      _spanId = [decoder decodeInt64ForKey: @"spanId"];
      _spanIdIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_refTypeIsSet)
  {
    [encoder encodeInt: _refType forKey: @"refType"];
  }
  if (_traceIdLowIsSet)
  {
    [encoder encodeInt64: _traceIdLow forKey: @"traceIdLow"];
  }
  if (_traceIdHighIsSet)
  {
    [encoder encodeInt64: _traceIdHigh forKey: @"traceIdHigh"];
  }
  if (_spanIdIsSet)
  {
    [encoder encodeInt64: _spanId forKey: @"spanId"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _refTypeIsSet ? 2654435761 : 0;
  if (_refTypeIsSet)
  {
    hash = (hash * 31) ^ [@(_refType) hash];
  }
  hash = (hash * 31) ^ _traceIdLowIsSet ? 2654435761 : 0;
  if (_traceIdLowIsSet)
  {
    hash = (hash * 31) ^ [@(_traceIdLow) hash];
  }
  hash = (hash * 31) ^ _traceIdHighIsSet ? 2654435761 : 0;
  if (_traceIdHighIsSet)
  {
    hash = (hash * 31) ^ [@(_traceIdHigh) hash];
  }
  hash = (hash * 31) ^ _spanIdIsSet ? 2654435761 : 0;
  if (_spanIdIsSet)
  {
    hash = (hash * 31) ^ [@(_spanId) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SpanRef class]]) {
    return NO;
  }
  SpanRef *other = (SpanRef *)anObject;
  if ((_refTypeIsSet != other->_refTypeIsSet) ||
      (_refTypeIsSet && (_refType != other->_refType))) {
    return NO;
  }
  if ((_traceIdLowIsSet != other->_traceIdLowIsSet) ||
      (_traceIdLowIsSet && (_traceIdLow != other->_traceIdLow))) {
    return NO;
  }
  if ((_traceIdHighIsSet != other->_traceIdHighIsSet) ||
      (_traceIdHighIsSet && (_traceIdHigh != other->_traceIdHigh))) {
    return NO;
  }
  if ((_spanIdIsSet != other->_spanIdIsSet) ||
      (_spanIdIsSet && (_spanId != other->_spanId))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  SpanRef * val = [SpanRef new];
  if (_refTypeIsSet)
  {
    val.refType = self.refType;
  }
  if (_traceIdLowIsSet)
  {
    val.traceIdLow = self.traceIdLow;
  }
  if (_traceIdHighIsSet)
  {
    val.traceIdHigh = self.traceIdHigh;
  }
  if (_spanIdIsSet)
  {
    val.spanId = self.spanId;
  }
  return val;
}

- (void) setRefType: (SpanRefType) refType {
  _refType = refType;
  _refTypeIsSet = YES;
}

- (void) unsetRefType {
  _refTypeIsSet = NO;
}

- (void) setTraceIdLow: (SInt64) traceIdLow {
  _traceIdLow = traceIdLow;
  _traceIdLowIsSet = YES;
}

- (void) unsetTraceIdLow {
  _traceIdLowIsSet = NO;
}

- (void) setTraceIdHigh: (SInt64) traceIdHigh {
  _traceIdHigh = traceIdHigh;
  _traceIdHighIsSet = YES;
}

- (void) unsetTraceIdHigh {
  _traceIdHighIsSet = NO;
}

- (void) setSpanId: (SInt64) spanId {
  _spanId = spanId;
  _spanIdIsSet = YES;
}

- (void) unsetSpanId {
  _spanIdIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI32) {
          SpanRefType fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.refType = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.traceIdLow = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.traceIdHigh = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.spanId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"SpanRef" error: __thriftError]) return NO;
  if (_refTypeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"refType" type: TTypeI32 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _refType error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_traceIdLowIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"traceIdLow" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _traceIdLow error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_traceIdHighIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"traceIdHigh" type: TTypeI64 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _traceIdHigh error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_spanIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"spanId" type: TTypeI64 fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _spanId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_refTypeIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"refType"}];
    }
  }
  if (!_traceIdLowIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"traceIdLow"}];
    }
  }
  if (!_traceIdHighIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"traceIdHigh"}];
    }
  }
  if (!_spanIdIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"spanId"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SpanRef("];
  [ms appendString: @"refType:"];
  [ms appendFormat: @"%i", (int)_refType];
  [ms appendString: @",traceIdLow:"];
  [ms appendFormat: @"%qi", _traceIdLow];
  [ms appendString: @",traceIdHigh:"];
  [ms appendFormat: @"%qi", _traceIdHigh];
  [ms appendString: @",spanId:"];
  [ms appendFormat: @"%qi", _spanId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Span

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithTraceIdLow: (SInt64) traceIdLow traceIdHigh: (SInt64) traceIdHigh spanId: (SInt64) spanId parentSpanId: (SInt64) parentSpanId operationName: (NSString *) operationName references: (NSArray<SpanRef *> *) references flags: (SInt32) flags startTime: (SInt64) startTime duration: (SInt64) duration tags: (NSArray<Tag *> *) tags logs: (NSArray<Log *> *) logs
{
  self = [super init];
  if (self)  {
    _traceIdLow = traceIdLow;
    _traceIdLowIsSet = YES;
    _traceIdHigh = traceIdHigh;
    _traceIdHighIsSet = YES;
    _spanId = spanId;
    _spanIdIsSet = YES;
    _parentSpanId = parentSpanId;
    _parentSpanIdIsSet = YES;
    _operationName = operationName;
    _operationNameIsSet = YES;
    _references = [references mutableCopy];
    _referencesIsSet = YES;
    _flags = flags;
    _flagsIsSet = YES;
    _startTime = startTime;
    _startTimeIsSet = YES;
    _duration = duration;
    _durationIsSet = YES;
    _tags = [tags mutableCopy];
    _tagsIsSet = YES;
    _logs = [logs mutableCopy];
    _logsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"traceIdLow"])
    {
      _traceIdLow = [decoder decodeInt64ForKey: @"traceIdLow"];
      _traceIdLowIsSet = YES;
    }
    if ([decoder containsValueForKey: @"traceIdHigh"])
    {
      _traceIdHigh = [decoder decodeInt64ForKey: @"traceIdHigh"];
      _traceIdHighIsSet = YES;
    }
    if ([decoder containsValueForKey: @"spanId"])
    {
      _spanId = [decoder decodeInt64ForKey: @"spanId"];
      _spanIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"parentSpanId"])
    {
      _parentSpanId = [decoder decodeInt64ForKey: @"parentSpanId"];
      _parentSpanIdIsSet = YES;
    }
    if ([decoder containsValueForKey: @"operationName"])
    {
      _operationName = [decoder decodeObjectForKey: @"operationName"];
      _operationNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"references"])
    {
      _references = [decoder decodeObjectForKey: @"references"];
      _referencesIsSet = YES;
    }
    if ([decoder containsValueForKey: @"flags"])
    {
      _flags = [decoder decodeInt32ForKey: @"flags"];
      _flagsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"startTime"])
    {
      _startTime = [decoder decodeInt64ForKey: @"startTime"];
      _startTimeIsSet = YES;
    }
    if ([decoder containsValueForKey: @"duration"])
    {
      _duration = [decoder decodeInt64ForKey: @"duration"];
      _durationIsSet = YES;
    }
    if ([decoder containsValueForKey: @"tags"])
    {
      _tags = [decoder decodeObjectForKey: @"tags"];
      _tagsIsSet = YES;
    }
    if ([decoder containsValueForKey: @"logs"])
    {
      _logs = [decoder decodeObjectForKey: @"logs"];
      _logsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_traceIdLowIsSet)
  {
    [encoder encodeInt64: _traceIdLow forKey: @"traceIdLow"];
  }
  if (_traceIdHighIsSet)
  {
    [encoder encodeInt64: _traceIdHigh forKey: @"traceIdHigh"];
  }
  if (_spanIdIsSet)
  {
    [encoder encodeInt64: _spanId forKey: @"spanId"];
  }
  if (_parentSpanIdIsSet)
  {
    [encoder encodeInt64: _parentSpanId forKey: @"parentSpanId"];
  }
  if (_operationNameIsSet)
  {
    [encoder encodeObject: _operationName forKey: @"operationName"];
  }
  if (_referencesIsSet)
  {
    [encoder encodeObject: _references forKey: @"references"];
  }
  if (_flagsIsSet)
  {
    [encoder encodeInt32: _flags forKey: @"flags"];
  }
  if (_startTimeIsSet)
  {
    [encoder encodeInt64: _startTime forKey: @"startTime"];
  }
  if (_durationIsSet)
  {
    [encoder encodeInt64: _duration forKey: @"duration"];
  }
  if (_tagsIsSet)
  {
    [encoder encodeObject: _tags forKey: @"tags"];
  }
  if (_logsIsSet)
  {
    [encoder encodeObject: _logs forKey: @"logs"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _traceIdLowIsSet ? 2654435761 : 0;
  if (_traceIdLowIsSet)
  {
    hash = (hash * 31) ^ [@(_traceIdLow) hash];
  }
  hash = (hash * 31) ^ _traceIdHighIsSet ? 2654435761 : 0;
  if (_traceIdHighIsSet)
  {
    hash = (hash * 31) ^ [@(_traceIdHigh) hash];
  }
  hash = (hash * 31) ^ _spanIdIsSet ? 2654435761 : 0;
  if (_spanIdIsSet)
  {
    hash = (hash * 31) ^ [@(_spanId) hash];
  }
  hash = (hash * 31) ^ _parentSpanIdIsSet ? 2654435761 : 0;
  if (_parentSpanIdIsSet)
  {
    hash = (hash * 31) ^ [@(_parentSpanId) hash];
  }
  hash = (hash * 31) ^ _operationNameIsSet ? 2654435761 : 0;
  if (_operationNameIsSet)
  {
    hash = (hash * 31) ^ [_operationName hash];
  }
  hash = (hash * 31) ^ _referencesIsSet ? 2654435761 : 0;
  if (_referencesIsSet)
  {
    hash = (hash * 31) ^ [_references hash];
  }
  hash = (hash * 31) ^ _flagsIsSet ? 2654435761 : 0;
  if (_flagsIsSet)
  {
    hash = (hash * 31) ^ [@(_flags) hash];
  }
  hash = (hash * 31) ^ _startTimeIsSet ? 2654435761 : 0;
  if (_startTimeIsSet)
  {
    hash = (hash * 31) ^ [@(_startTime) hash];
  }
  hash = (hash * 31) ^ _durationIsSet ? 2654435761 : 0;
  if (_durationIsSet)
  {
    hash = (hash * 31) ^ [@(_duration) hash];
  }
  hash = (hash * 31) ^ _tagsIsSet ? 2654435761 : 0;
  if (_tagsIsSet)
  {
    hash = (hash * 31) ^ [_tags hash];
  }
  hash = (hash * 31) ^ _logsIsSet ? 2654435761 : 0;
  if (_logsIsSet)
  {
    hash = (hash * 31) ^ [_logs hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Span class]]) {
    return NO;
  }
  Span *other = (Span *)anObject;
  if ((_traceIdLowIsSet != other->_traceIdLowIsSet) ||
      (_traceIdLowIsSet && (_traceIdLow != other->_traceIdLow))) {
    return NO;
  }
  if ((_traceIdHighIsSet != other->_traceIdHighIsSet) ||
      (_traceIdHighIsSet && (_traceIdHigh != other->_traceIdHigh))) {
    return NO;
  }
  if ((_spanIdIsSet != other->_spanIdIsSet) ||
      (_spanIdIsSet && (_spanId != other->_spanId))) {
    return NO;
  }
  if ((_parentSpanIdIsSet != other->_parentSpanIdIsSet) ||
      (_parentSpanIdIsSet && (_parentSpanId != other->_parentSpanId))) {
    return NO;
  }
  if ((_operationNameIsSet != other->_operationNameIsSet) ||
      (_operationNameIsSet && ((_operationName || other->_operationName) && ![_operationName isEqual:other->_operationName]))) {
    return NO;
  }
  if ((_referencesIsSet != other->_referencesIsSet) ||
      (_referencesIsSet && ((_references || other->_references) && ![_references isEqual:other->_references]))) {
    return NO;
  }
  if ((_flagsIsSet != other->_flagsIsSet) ||
      (_flagsIsSet && (_flags != other->_flags))) {
    return NO;
  }
  if ((_startTimeIsSet != other->_startTimeIsSet) ||
      (_startTimeIsSet && (_startTime != other->_startTime))) {
    return NO;
  }
  if ((_durationIsSet != other->_durationIsSet) ||
      (_durationIsSet && (_duration != other->_duration))) {
    return NO;
  }
  if ((_tagsIsSet != other->_tagsIsSet) ||
      (_tagsIsSet && ((_tags || other->_tags) && ![_tags isEqual:other->_tags]))) {
    return NO;
  }
  if ((_logsIsSet != other->_logsIsSet) ||
      (_logsIsSet && ((_logs || other->_logs) && ![_logs isEqual:other->_logs]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Span * val = [Span new];
  if (_traceIdLowIsSet)
  {
    val.traceIdLow = self.traceIdLow;
  }
  if (_traceIdHighIsSet)
  {
    val.traceIdHigh = self.traceIdHigh;
  }
  if (_spanIdIsSet)
  {
    val.spanId = self.spanId;
  }
  if (_parentSpanIdIsSet)
  {
    val.parentSpanId = self.parentSpanId;
  }
  if (_operationNameIsSet)
  {
    val.operationName = [self.operationName copy];
  }
  if (_referencesIsSet)
  {
    val.references = [self.references copy];
  }
  if (_flagsIsSet)
  {
    val.flags = self.flags;
  }
  if (_startTimeIsSet)
  {
    val.startTime = self.startTime;
  }
  if (_durationIsSet)
  {
    val.duration = self.duration;
  }
  if (_tagsIsSet)
  {
    val.tags = [self.tags copy];
  }
  if (_logsIsSet)
  {
    val.logs = [self.logs copy];
  }
  return val;
}

- (void) setTraceIdLow: (SInt64) traceIdLow {
  _traceIdLow = traceIdLow;
  _traceIdLowIsSet = YES;
}

- (void) unsetTraceIdLow {
  _traceIdLowIsSet = NO;
}

- (void) setTraceIdHigh: (SInt64) traceIdHigh {
  _traceIdHigh = traceIdHigh;
  _traceIdHighIsSet = YES;
}

- (void) unsetTraceIdHigh {
  _traceIdHighIsSet = NO;
}

- (void) setSpanId: (SInt64) spanId {
  _spanId = spanId;
  _spanIdIsSet = YES;
}

- (void) unsetSpanId {
  _spanIdIsSet = NO;
}

- (void) setParentSpanId: (SInt64) parentSpanId {
  _parentSpanId = parentSpanId;
  _parentSpanIdIsSet = YES;
}

- (void) unsetParentSpanId {
  _parentSpanIdIsSet = NO;
}

- (void) setOperationName: (NSString *) operationName {
  _operationName = operationName;
  _operationNameIsSet = YES;
}

- (void) unsetOperationName {
  _operationName = nil;
  _operationNameIsSet = NO;
}

- (void) setReferences: (NSMutableArray<SpanRef *> *) references {
  _references = references;
  _referencesIsSet = YES;
}

- (void) unsetReferences {
  _references = nil;
  _referencesIsSet = NO;
}

- (void) setFlags: (SInt32) flags {
  _flags = flags;
  _flagsIsSet = YES;
}

- (void) unsetFlags {
  _flagsIsSet = NO;
}

- (void) setStartTime: (SInt64) startTime {
  _startTime = startTime;
  _startTimeIsSet = YES;
}

- (void) unsetStartTime {
  _startTimeIsSet = NO;
}

- (void) setDuration: (SInt64) duration {
  _duration = duration;
  _durationIsSet = YES;
}

- (void) unsetDuration {
  _durationIsSet = NO;
}

- (void) setTags: (NSMutableArray<Tag *> *) tags {
  _tags = tags;
  _tagsIsSet = YES;
}

- (void) unsetTags {
  _tags = nil;
  _tagsIsSet = NO;
}

- (void) setLogs: (NSMutableArray<Log *> *) logs {
  _logs = logs;
  _logsIsSet = YES;
}

- (void) unsetLogs {
  _logs = nil;
  _logsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.traceIdLow = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.traceIdHigh = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 3:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.spanId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 4:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.parentSpanId = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 5:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.operationName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 6:
        if (fieldType == TTypeLIST) {
          SInt32 _size5;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size5 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            SpanRef *_elem7 = [[SpanRef alloc] init];
            if (![_elem7 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem7];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.references = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 7:
        if (fieldType == TTypeI32) {
          SInt32 fieldValue;
          if (![inProtocol readI32:&fieldValue error: __thriftError]) return NO;
          self.flags = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 8:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.startTime = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 9:
        if (fieldType == TTypeI64) {
          SInt64 fieldValue;
          if (![inProtocol readI64:&fieldValue error: __thriftError]) return NO;
          self.duration = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 10:
        if (fieldType == TTypeLIST) {
          SInt32 _size8;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size8 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size8];
          int _i9;
          for (_i9 = 0; _i9 < _size8; ++_i9)
          {
            Tag *_elem10 = [[Tag alloc] init];
            if (![_elem10 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem10];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.tags = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 11:
        if (fieldType == TTypeLIST) {
          SInt32 _size11;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size11 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size11];
          int _i12;
          for (_i12 = 0; _i12 < _size11; ++_i12)
          {
            Log *_elem13 = [[Log alloc] init];
            if (![_elem13 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem13];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.logs = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Span" error: __thriftError]) return NO;
  if (_traceIdLowIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"traceIdLow" type: TTypeI64 fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _traceIdLow error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_traceIdHighIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"traceIdHigh" type: TTypeI64 fieldID: 2 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _traceIdHigh error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_spanIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"spanId" type: TTypeI64 fieldID: 3 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _spanId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_parentSpanIdIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"parentSpanId" type: TTypeI64 fieldID: 4 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _parentSpanId error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_operationNameIsSet) {
    if (_operationName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"operationName" type: TTypeSTRING fieldID: 5 error: __thriftError]) return NO;
      if (![outProtocol writeString: _operationName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_referencesIsSet) {
    if (_references != nil) {
      if (![outProtocol writeFieldBeginWithName: @"references" type: TTypeLIST fieldID: 6 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_references count] error: __thriftError]) return NO;
        int idx15;
        for (idx15 = 0; idx15 < [_references count]; idx15++)
        {
          if (![[_references objectAtIndex: idx15] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_flagsIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"flags" type: TTypeI32 fieldID: 7 error: __thriftError]) return NO;
    if (![outProtocol writeI32: _flags error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_startTimeIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"startTime" type: TTypeI64 fieldID: 8 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _startTime error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_durationIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"duration" type: TTypeI64 fieldID: 9 error: __thriftError]) return NO;
    if (![outProtocol writeI64: _duration error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (_tagsIsSet) {
    if (_tags != nil) {
      if (![outProtocol writeFieldBeginWithName: @"tags" type: TTypeLIST fieldID: 10 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_tags count] error: __thriftError]) return NO;
        int idx17;
        for (idx17 = 0; idx17 < [_tags count]; idx17++)
        {
          if (![[_tags objectAtIndex: idx17] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_logsIsSet) {
    if (_logs != nil) {
      if (![outProtocol writeFieldBeginWithName: @"logs" type: TTypeLIST fieldID: 11 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_logs count] error: __thriftError]) return NO;
        int idx19;
        for (idx19 = 0; idx19 < [_logs count]; idx19++)
        {
          if (![[_logs objectAtIndex: idx19] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_traceIdLowIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"traceIdLow"}];
    }
  }
  if (!_traceIdHighIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"traceIdHigh"}];
    }
  }
  if (!_spanIdIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"spanId"}];
    }
  }
  if (!_parentSpanIdIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"parentSpanId"}];
    }
  }
  if (!_operationNameIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"operationName"}];
    }
  }
  if (!_flagsIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"flags"}];
    }
  }
  if (!_startTimeIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"startTime"}];
    }
  }
  if (!_durationIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"duration"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Span("];
  [ms appendString: @"traceIdLow:"];
  [ms appendFormat: @"%qi", _traceIdLow];
  [ms appendString: @",traceIdHigh:"];
  [ms appendFormat: @"%qi", _traceIdHigh];
  [ms appendString: @",spanId:"];
  [ms appendFormat: @"%qi", _spanId];
  [ms appendString: @",parentSpanId:"];
  [ms appendFormat: @"%qi", _parentSpanId];
  [ms appendString: @",operationName:"];
  [ms appendFormat: @"\"%@\"", _operationName];
  [ms appendString: @",references:"];
  [ms appendFormat: @"%@", _references];
  [ms appendString: @",flags:"];
  [ms appendFormat: @"%i", (int)_flags];
  [ms appendString: @",startTime:"];
  [ms appendFormat: @"%qi", _startTime];
  [ms appendString: @",duration:"];
  [ms appendFormat: @"%qi", _duration];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", _tags];
  [ms appendString: @",logs:"];
  [ms appendFormat: @"%@", _logs];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Process

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithServiceName: (NSString *) serviceName tags: (NSArray<Tag *> *) tags
{
  self = [super init];
  if (self)  {
    _serviceName = serviceName;
    _serviceNameIsSet = YES;
    _tags = [tags mutableCopy];
    _tagsIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"serviceName"])
    {
      _serviceName = [decoder decodeObjectForKey: @"serviceName"];
      _serviceNameIsSet = YES;
    }
    if ([decoder containsValueForKey: @"tags"])
    {
      _tags = [decoder decodeObjectForKey: @"tags"];
      _tagsIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_serviceNameIsSet)
  {
    [encoder encodeObject: _serviceName forKey: @"serviceName"];
  }
  if (_tagsIsSet)
  {
    [encoder encodeObject: _tags forKey: @"tags"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _serviceNameIsSet ? 2654435761 : 0;
  if (_serviceNameIsSet)
  {
    hash = (hash * 31) ^ [_serviceName hash];
  }
  hash = (hash * 31) ^ _tagsIsSet ? 2654435761 : 0;
  if (_tagsIsSet)
  {
    hash = (hash * 31) ^ [_tags hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Process class]]) {
    return NO;
  }
  Process *other = (Process *)anObject;
  if ((_serviceNameIsSet != other->_serviceNameIsSet) ||
      (_serviceNameIsSet && ((_serviceName || other->_serviceName) && ![_serviceName isEqual:other->_serviceName]))) {
    return NO;
  }
  if ((_tagsIsSet != other->_tagsIsSet) ||
      (_tagsIsSet && ((_tags || other->_tags) && ![_tags isEqual:other->_tags]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Process * val = [Process new];
  if (_serviceNameIsSet)
  {
    val.serviceName = [self.serviceName copy];
  }
  if (_tagsIsSet)
  {
    val.tags = [self.tags copy];
  }
  return val;
}

- (void) setServiceName: (NSString *) serviceName {
  _serviceName = serviceName;
  _serviceNameIsSet = YES;
}

- (void) unsetServiceName {
  _serviceName = nil;
  _serviceNameIsSet = NO;
}

- (void) setTags: (NSMutableArray<Tag *> *) tags {
  _tags = tags;
  _tagsIsSet = YES;
}

- (void) unsetTags {
  _tags = nil;
  _tagsIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRING) {
          NSString * fieldValue;
          if (![inProtocol readString:&fieldValue error: __thriftError]) return NO;
          self.serviceName = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeLIST) {
          SInt32 _size20;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size20 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            Tag *_elem22 = [[Tag alloc] init];
            if (![_elem22 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem22];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.tags = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Process" error: __thriftError]) return NO;
  if (_serviceNameIsSet) {
    if (_serviceName != nil) {
      if (![outProtocol writeFieldBeginWithName: @"serviceName" type: TTypeSTRING fieldID: 1 error: __thriftError]) return NO;
      if (![outProtocol writeString: _serviceName error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_tagsIsSet) {
    if (_tags != nil) {
      if (![outProtocol writeFieldBeginWithName: @"tags" type: TTypeLIST fieldID: 2 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_tags count] error: __thriftError]) return NO;
        int idx24;
        for (idx24 = 0; idx24 < [_tags count]; idx24++)
        {
          if (![[_tags objectAtIndex: idx24] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_serviceNameIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"serviceName"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Process("];
  [ms appendString: @"serviceName:"];
  [ms appendFormat: @"\"%@\"", _serviceName];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"%@", _tags];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Batch

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithProcess: (Process *) process spans: (NSArray<Span *> *) spans
{
  self = [super init];
  if (self)  {
    _process = process;
    _processIsSet = YES;
    _spans = [spans mutableCopy];
    _spansIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"process"])
    {
      _process = [decoder decodeObjectForKey: @"process"];
      _processIsSet = YES;
    }
    if ([decoder containsValueForKey: @"spans"])
    {
      _spans = [decoder decodeObjectForKey: @"spans"];
      _spansIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_processIsSet)
  {
    [encoder encodeObject: _process forKey: @"process"];
  }
  if (_spansIsSet)
  {
    [encoder encodeObject: _spans forKey: @"spans"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _processIsSet ? 2654435761 : 0;
  if (_processIsSet)
  {
    hash = (hash * 31) ^ [_process hash];
  }
  hash = (hash * 31) ^ _spansIsSet ? 2654435761 : 0;
  if (_spansIsSet)
  {
    hash = (hash * 31) ^ [_spans hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Batch class]]) {
    return NO;
  }
  Batch *other = (Batch *)anObject;
  if ((_processIsSet != other->_processIsSet) ||
      (_processIsSet && ((_process || other->_process) && ![_process isEqual:other->_process]))) {
    return NO;
  }
  if ((_spansIsSet != other->_spansIsSet) ||
      (_spansIsSet && ((_spans || other->_spans) && ![_spans isEqual:other->_spans]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Batch * val = [Batch new];
  if (_processIsSet)
  {
    val.process = [self.process copy];
  }
  if (_spansIsSet)
  {
    val.spans = [self.spans copy];
  }
  return val;
}

- (void) setProcess: (Process *) process {
  _process = process;
  _processIsSet = YES;
}

- (void) unsetProcess {
  _process = nil;
  _processIsSet = NO;
}

- (void) setSpans: (NSMutableArray<Span *> *) spans {
  _spans = spans;
  _spansIsSet = YES;
}

- (void) unsetSpans {
  _spans = nil;
  _spansIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeSTRUCT) {
          Process *fieldValue = [[Process alloc] init];
          if (![fieldValue read: inProtocol error: __thriftError]) return NO;
          self.process = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      case 2:
        if (fieldType == TTypeLIST) {
          SInt32 _size25;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size25 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            Span *_elem27 = [[Span alloc] init];
            if (![_elem27 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem27];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.spans = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Batch" error: __thriftError]) return NO;
  if (_processIsSet) {
    if (_process != nil) {
      if (![outProtocol writeFieldBeginWithName: @"process" type: TTypeSTRUCT fieldID: 1 error: __thriftError]) return NO;
      if (![_process write: outProtocol error: __thriftError]) return NO;
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (_spansIsSet) {
    if (_spans != nil) {
      if (![outProtocol writeFieldBeginWithName: @"spans" type: TTypeLIST fieldID: 2 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_spans count] error: __thriftError]) return NO;
        int idx29;
        for (idx29 = 0; idx29 < [_spans count]; idx29++)
        {
          if (![[_spans objectAtIndex: idx29] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_processIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"process"}];
    }
  }
  if (!_spansIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"spans"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Batch("];
  [ms appendString: @"process:"];
  [ms appendFormat: @"%@", _process];
  [ms appendString: @",spans:"];
  [ms appendFormat: @"%@", _spans];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BatchSubmitResponse

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithOk: (BOOL) ok
{
  self = [super init];
  if (self)  {
    _ok = ok;
    _okIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"ok"])
    {
      _ok = [decoder decodeBoolForKey: @"ok"];
      _okIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_okIsSet)
  {
    [encoder encodeBool: _ok forKey: @"ok"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _okIsSet ? 2654435761 : 0;
  if (_okIsSet)
  {
    hash = (hash * 31) ^ [@(_ok) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BatchSubmitResponse class]]) {
    return NO;
  }
  BatchSubmitResponse *other = (BatchSubmitResponse *)anObject;
  if ((_okIsSet != other->_okIsSet) ||
      (_okIsSet && (_ok != other->_ok))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  BatchSubmitResponse * val = [BatchSubmitResponse new];
  if (_okIsSet)
  {
    val.ok = self.ok;
  }
  return val;
}

- (void) setOk: (BOOL) ok {
  _ok = ok;
  _okIsSet = YES;
}

- (void) unsetOk {
  _okIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeBOOL) {
          BOOL fieldValue;
          if (![inProtocol readBool:&fieldValue error: __thriftError]) return NO;
          self.ok = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"BatchSubmitResponse" error: __thriftError]) return NO;
  if (_okIsSet) {
    if (![outProtocol writeFieldBeginWithName: @"ok" type: TTypeBOOL fieldID: 1 error: __thriftError]) return NO;
    if (![outProtocol writeBool: _ok error: __thriftError]) return NO;
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  if (!_okIsSet)   {
    if (__thriftError)     {
      *__thriftError = [NSError errorWithDomain: TProtocolErrorDomain
                                           code: TProtocolErrorUnknown
                                       userInfo: @{TProtocolErrorExtendedErrorKey: @(TProtocolExtendedErrorMissingRequiredField),
                                                   TProtocolErrorFieldNameKey: @"ok"}];
    }
  }
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BatchSubmitResponse("];
  [ms appendString: @"ok:"];
  [ms appendFormat: @"%i", _ok];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

NSString *JaegerErrorDomain = @"JaegerErrorDomain";


@interface Collector_submitBatches_args : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSMutableArray<Batch *> * batches;
@property (assign, nonatomic) BOOL batchesIsSet;
- (void) unsetBatches;


- (instancetype) initWithBatches: (NSArray<Batch *> *) batches;

@end

@implementation Collector_submitBatches_args

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithBatches: (NSArray<Batch *> *) batches
{
  self = [super init];
  if (self)  {
    _batches = [batches mutableCopy];
    _batchesIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"batches"])
    {
      _batches = [decoder decodeObjectForKey: @"batches"];
      _batchesIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_batchesIsSet)
  {
    [encoder encodeObject: _batches forKey: @"batches"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _batchesIsSet ? 2654435761 : 0;
  if (_batchesIsSet)
  {
    hash = (hash * 31) ^ [_batches hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Collector_submitBatches_args class]]) {
    return NO;
  }
  Collector_submitBatches_args *other = (Collector_submitBatches_args *)anObject;
  if ((_batchesIsSet != other->_batchesIsSet) ||
      (_batchesIsSet && ((_batches || other->_batches) && ![_batches isEqual:other->_batches]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Collector_submitBatches_args * val = [Collector_submitBatches_args new];
  if (_batchesIsSet)
  {
    val.batches = [self.batches copy];
  }
  return val;
}

- (void) setBatches: (NSMutableArray<Batch *> *) batches {
  _batches = batches;
  _batchesIsSet = YES;
}

- (void) unsetBatches {
  _batches = nil;
  _batchesIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TTypeLIST) {
          SInt32 _size30;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size30 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            Batch *_elem32 = [[Batch alloc] init];
            if (![_elem32 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem32];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.batches = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Collector_submitBatches_args" error: __thriftError]) return NO;
  if (_batchesIsSet) {
    if (_batches != nil) {
      if (![outProtocol writeFieldBeginWithName: @"batches" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_batches count] error: __thriftError]) return NO;
        int idx34;
        for (idx34 = 0; idx34 < [_batches count]; idx34++)
        {
          if (![[_batches objectAtIndex: idx34] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Collector_submitBatches_args("];
  [ms appendString: @"batches:"];
  [ms appendFormat: @"%@", _batches];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Collector_submitBatches_result : NSObject <TBase, NSCoding, NSCopying> 

@property (strong, nonatomic) NSMutableArray<BatchSubmitResponse *> * success;
@property (assign, nonatomic) BOOL successIsSet;
- (void) unsetSuccess;


- (instancetype) initWithSuccess: (NSArray<BatchSubmitResponse *> *) success;

@end

@implementation Collector_submitBatches_result

- (instancetype) init
{
  self = [super init];
  if (self)  {
  }
  return self;
}

- (instancetype) initWithSuccess: (NSArray<BatchSubmitResponse *> *) success
{
  self = [super init];
  if (self)  {
    _success = [success mutableCopy];
    _successIsSet = YES;
  }
  return self;
}

- (instancetype) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if (self)   {
    if ([decoder containsValueForKey: @"success"])
    {
      _success = [decoder decodeObjectForKey: @"success"];
      _successIsSet = YES;
    }
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (_successIsSet)
  {
    [encoder encodeObject: _success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ _successIsSet ? 2654435761 : 0;
  if (_successIsSet)
  {
    hash = (hash * 31) ^ [_success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Collector_submitBatches_result class]]) {
    return NO;
  }
  Collector_submitBatches_result *other = (Collector_submitBatches_result *)anObject;
  if ((_successIsSet != other->_successIsSet) ||
      (_successIsSet && ((_success || other->_success) && ![_success isEqual:other->_success]))) {
    return NO;
  }
  return YES;
}

- (instancetype) copyWithZone:(NSZone *)zone
{
  Collector_submitBatches_result * val = [Collector_submitBatches_result new];
  if (_successIsSet)
  {
    val.success = [self.success copy];
  }
  return val;
}

- (void) setSuccess: (NSMutableArray<BatchSubmitResponse *> *) success {
  _success = success;
  _successIsSet = YES;
}

- (void) unsetSuccess {
  _success = nil;
  _successIsSet = NO;
}

- (BOOL) read: (id <TProtocol>) inProtocol error: (NSError *__autoreleasing *)__thriftError
{
  NSString * fieldName;
  SInt32 fieldType;
  SInt32 fieldID;

  if (![inProtocol readStructBeginReturningName: NULL error: __thriftError]) return NO;
  while (true)
  {
    if (![inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID error: __thriftError]) return NO;
    if (fieldType == TTypeSTOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TTypeLIST) {
          SInt32 _size35;
          if (![inProtocol readListBeginReturningElementType: NULL size: &_size35 error: __thriftError]) return NO;
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            BatchSubmitResponse *_elem37 = [[BatchSubmitResponse alloc] init];
            if (![_elem37 read: inProtocol error: __thriftError]) return NO;
            [fieldValue addObject: _elem37];
          }
          if (![inProtocol readListEnd: __thriftError]) return NO;
          self.success = fieldValue;
        } else { 
          if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        }
        break;
      default:
        if (![TProtocolUtil skipType: fieldType onProtocol: inProtocol error: __thriftError]) return NO;
        break;
    }
    if (![inProtocol readFieldEnd: __thriftError]) return NO;
  }
  if (![inProtocol readStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) write: (id <TProtocol>) outProtocol error: (NSError *__autoreleasing *)__thriftError {
  if (![outProtocol writeStructBeginWithName: @"Collector_submitBatches_result" error: __thriftError]) return NO;

  if (_successIsSet) {
    if (_success != nil) {
      if (![outProtocol writeFieldBeginWithName: @"success" type: TTypeLIST fieldID: 0 error: __thriftError]) return NO;
      {
        if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[_success count] error: __thriftError]) return NO;
        int idx39;
        for (idx39 = 0; idx39 < [_success count]; idx39++)
        {
          if (![[_success objectAtIndex: idx39] write: outProtocol error: __thriftError]) return NO;
        }
        if (![outProtocol writeListEnd: __thriftError]) return NO;
      }
      if (![outProtocol writeFieldEnd: __thriftError]) return NO;
    }
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) validate: (NSError *__autoreleasing *)__thriftError {
  // check for required fields
  return YES;
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Collector_submitBatches_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", _success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CollectorClient () {

  id<TProtocol> inProtocol;
  id<TProtocol> outProtocol;

}

@end

@implementation CollectorClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  if (self)   {
    inProtocol = anInProtocol;
    outProtocol = anOutProtocol;
  }
  return self;
}

- (BOOL) send_submitBatches: (NSArray<Batch *> *) batches error: (NSError *__autoreleasing *)__thriftError
{
  if (![outProtocol writeMessageBeginWithName: @"submitBatches" type: TMessageTypeCALL sequenceID: 0 error: __thriftError]) return NO;
  if (![outProtocol writeStructBeginWithName: @"Collector_submitBatches_args" error: __thriftError]) return NO;
  if (batches != nil)  {
    if (![outProtocol writeFieldBeginWithName: @"batches" type: TTypeLIST fieldID: 1 error: __thriftError]) return NO;
    {
      if (![outProtocol writeListBeginWithElementType: TTypeSTRUCT size: (SInt32)[batches count] error: __thriftError]) return NO;
      int idx41;
      for (idx41 = 0; idx41 < [batches count]; idx41++)
      {
        if (![[batches objectAtIndex: idx41] write: outProtocol error: __thriftError]) return NO;
      }
      if (![outProtocol writeListEnd: __thriftError]) return NO;
    }
    if (![outProtocol writeFieldEnd: __thriftError]) return NO;
  }
  if (![outProtocol writeFieldStop: __thriftError]) return NO;
  if (![outProtocol writeStructEnd: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  return YES;
}

- (BOOL) recv_submitBatches: (NSMutableArray<BatchSubmitResponse *> * *) result error: (NSError *__autoreleasing *)__thriftError
{
  NSError *incomingException = [self checkIncomingMessageException: inProtocol];
  if (incomingException)  {
    if (__thriftError)    {
      *__thriftError = incomingException;
    }
    return NO;
  }
  Collector_submitBatches_result * resulter = [Collector_submitBatches_result new];
  if (![resulter read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  if (resulter.successIsSet)  {
    *result = resulter.success;
    return YES;
  }
  if (__thriftError)  {
    *__thriftError = [NSError errorWithDomain: TApplicationErrorDomain
                                         code: TApplicationErrorMissingResult
                                     userInfo: @{TApplicationErrorMethodKey: @"submitBatches"}];
  }
  return NO;
}

- (NSArray<BatchSubmitResponse *> *) submitBatches: (NSArray<Batch *> *) batches error: (NSError *__autoreleasing *)__thriftError
{
  if (![self send_submitBatches : batches error: __thriftError]) return nil;
  if (![[outProtocol transport] flush: __thriftError]) return nil;
  NSMutableArray<BatchSubmitResponse *> * __result;
  if (![self recv_submitBatches: &__result error: __thriftError]) return nil;
  return __result;
}

@end

@interface CollectorProcessor () {
  id <Collector> service;
  NSDictionary * methodMap;
}
@end

@implementation CollectorProcessor

- (id) initWithCollector: (id <Collector>) aService
{
  self = [super init];
  if (self)   {
    service = aService;
    methodMap = [NSMutableDictionary dictionary];
    {
      SEL s = @selector(process_submitBatches_withSequenceID:inProtocol:outProtocol:error:);
      NSMethodSignature * sig = [self methodSignatureForSelector: s];
      NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
      [invocation setSelector: s];
      [invocation retainArguments];
      [methodMap setValue: invocation forKey: @"submitBatches"];
    }
  }
  return self;
}

- (id<Collector>) service
{
  return service;
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
                          error: (NSError *__autoreleasing *)__thriftError
{
  NSString * messageName;
  SInt32 messageType;
  SInt32 seqID;
  if (![inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID
                                      error: __thriftError]) return NO;
  NSInvocation * invocation = [methodMap valueForKey: messageName];
  if (invocation == nil) {
    if (![TProtocolUtil skipType: TTypeSTRUCT onProtocol: inProtocol error: __thriftError]) return NO;
    if (![inProtocol readMessageEnd: __thriftError]) return NO;
    NSError * x = [NSError errorWithDomain: TApplicationErrorDomain
                                      code: TApplicationErrorUnknownMethod
                                  userInfo: @{TApplicationErrorMethodKey: messageName}];
    if (![outProtocol writeMessageBeginWithName: messageName
                                           type: TMessageTypeEXCEPTION
                                     sequenceID: seqID
                                          error: __thriftError]) return NO;
    if (![x write: outProtocol error: __thriftError]) return NO;
    if (![outProtocol writeMessageEnd: __thriftError]) return NO;
    if (![[outProtocol transport] flush: __thriftError]) return NO;
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setArgument: &__thriftError atIndex: 5];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (BOOL) process_submitBatches_withSequenceID: (SInt32) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol error:(NSError *__autoreleasing *)__thriftError
{
  Collector_submitBatches_args * args = [Collector_submitBatches_args new];
  if (![args read: inProtocol error: __thriftError]) return NO;
  if (![inProtocol readMessageEnd: __thriftError]) return NO;
  Collector_submitBatches_result * result = [Collector_submitBatches_result new];
  NSMutableArray<BatchSubmitResponse *> * serviceResult = (NSMutableArray<BatchSubmitResponse *> *)[service submitBatches: [args batches] error: __thriftError];
  if (!serviceResult) return NO;
  [result setSuccess: serviceResult];
  if (![outProtocol writeMessageBeginWithName: @"submitBatches"
                                         type: TMessageTypeREPLY
                                   sequenceID: seqID
                                        error: __thriftError]) return NO;
  if (![result write: outProtocol error: __thriftError]) return NO;
  if (![outProtocol writeMessageEnd: __thriftError]) return NO;
  if (![[outProtocol transport] flush: __thriftError]) return NO;
  return YES;
}
@end

